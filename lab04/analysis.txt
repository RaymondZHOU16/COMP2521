
NOTE:
- Your time complexities should be expressed in big-O notation and be in
  terms of either:
  - n, where n is the number of nodes in the tree, or
  - h, where h is the height of the tree

=================
  bstNumLeaves
=================

- Worst case time complexity: O(n)

- Explanation: The function recursively visits each node in the tree exactly once.

=================
    bstRange
=================

- Worst case time complexity: O(h) = O(log n)

- Explanation: The code traverses the left subtree to find the smallest value and the right subtree to find the largest value, 
  both of which take O(log n) time in a balanced binary search tree.

=================
 bstDeleteLeaves
=================

- Worst case time complexity: O(n)

- Explanation: The function recursively visits each node in the tree exactly once.

=================
  bstLevelOrder
=================

- Worst case time complexity: O(n)

- Explanation: The function visits each node in the tree exactly once.


